services:
  postgres:
    image: postgres:16-alpine
    env_file:
      - ./env/postgres.env
    networks:
      - app
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ../..
      dockerfile: infra/docker/api.Dockerfile
    env_file:
      - ./env/api.env
    # environment:
    #   - DB_URL=${DB_URL:-postgresql+psycopg://macro:macro-pass@postgres:5432/text_expander}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - app

  web:
    build:
      context: ../..
      dockerfile: infra/docker/web.Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.localhost}
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - app

  caddy:
    image: caddy:2.8.4
    volumes:
      - ../caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - web
    networks:
      - app

networks:
  app: {}

volumes:
  caddy_data: {}
  caddy_config: {}
  pgdata: {}